@page "/"

@using LocalizationValidationForm.Component
@using LocalizationValidationForm.Model
@using System.Text.Json
@using System.Globalization
@using Blazored.FluentValidation
@using LocalizationValidationForm.Resources
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<Data> L

<h1>@L["FormTitle"]</h1>
<h2>Date: @DateTime.Now.ToLongDateString()</h2>
<h3>Current Culture: @CultureInfo.CurrentCulture</h3>

<LangSelector />

<EditForm Model="Employee" OnSubmit="HandleSubmit">
    <FluentValidationValidator @ref="_validator"/>
    
    <ValidationSummary Class="error-text" />
    <p>
        <InputText @bind-Value="Employee.Name"/><br/>
        <ValidationMessage Class="error-text" For="() => Employee.Name"/>
    </p>
    <p>
        <InputNumber @bind-Value="Employee.Age"/><br/>
        <ValidationMessage Class="error-text" For="() => Employee.Age"/>
    </p>
    <p>
        <InputText @bind-Value="Employee.EmployeeType"/><br/>
        <ValidationMessage Class="error-text" For="() => Employee.EmployeeType"/>
    </p>
    <p>
        <button type="submit">Submit Form</button>
    </p>
</EditForm>

@code {

    public Employee Employee { get; set; } = new();

    private FluentValidationValidator? _validator;

    private async Task HandleSubmit()
    {
        var result = await _validator!.ValidateAsync();

        if (result == false)
        {
            Console.WriteLine("Invalid form can't be submitted");
        }
        else
        {
            var employeeJson = JsonSerializer.Serialize(Employee, new JsonSerializerOptions()
            {
                WriteIndented = true
            });
            Console.WriteLine(employeeJson);
        }
    }

    private void HandleInvalidForm()
    {
        
    }
}

